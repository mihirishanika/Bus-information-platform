AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: BUS INFO LK - Bus Information Platform with DynamoDB

Parameters:
  UserPoolArn:
    Type: String
    Description: ARN of the Cognito User Pool to authorize API requests
  AllowedOrigin:
    Type: String
    Default: '*'
    Description: CORS allowed origin for API responses

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    MemorySize: 128
    Architectures:
      - x86_64
    Environment:
      Variables:
        BUS_TABLE_NAME: !Ref BusTable

Resources:
  # DynamoDB Table for Bus Information
  BusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: buses
      AttributeDefinitions:
        - AttributeName: licenseNo
          AttributeType: S
        - AttributeName: companyName
          AttributeType: S
        - AttributeName: route
          AttributeType: S
        - AttributeName: busType
          AttributeType: S
      KeySchema:
        - AttributeName: licenseNo
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CompanyIndex
          KeySchema:
            - AttributeName: companyName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: RouteIndex
          KeySchema:
            - AttributeName: route
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: TypeIndex
          KeySchema:
            - AttributeName: busType
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # API Gateway with Cognito Authorization
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: !Sub "'${AllowedOrigin}'"
      Auth:
        DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            UserPoolArn: !Ref UserPoolArn

  # Public route: /routes (legacy compatibility)
  GetRoutesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/getRoutes/
      Handler: index.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /routes
            Method: get
            Auth:
              Authorizer: NONE

  # Public route: /next (legacy compatibility)
  GetNextBusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/getNextBus/
      Handler: index.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /next
            Method: get
            Auth:
              Authorizer: NONE

  # Bus CRUD Operations
  BusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/buses/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusTable
      Events:
        # Create bus (temporarily public for testing)
        CreateBus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /buses
            Method: post
            Auth:
              Authorizer: NONE
        # List buses (public for search)
        ListBuses:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /buses
            Method: get
            Auth:
              Authorizer: NONE
        # Get specific bus (public)
        GetBus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /buses/{licenseNo}
            Method: get
            Auth:
              Authorizer: NONE
        # Update bus (temporarily public for testing)
        UpdateBus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /buses/{licenseNo}
            Method: put
            Auth:
              Authorizer: NONE
        # Verify bus (temporarily public for testing)
        VerifyBus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /buses/{licenseNo}/verify
            Method: post
            Auth:
              Authorizer: NONE
        # Report bus (temporarily public for testing)
        ReportBus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /buses/{licenseNo}/report
            Method: post
            Auth:
              Authorizer: NONE
        # Get user vote for bus (temporarily public for testing)
        GetUserVote:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /buses/{licenseNo}/vote
            Method: get
            Auth:
              Authorizer: NONE

  # Search buses (public)
  SearchBusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/searchBuses/
      Handler: index.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BusTable
      Events:
        SearchBus:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /search
            Method: get
            Auth:
              Authorizer: NONE

  # Protected ping endpoint
  ProtectedPingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/protectedPing/
      Handler: index.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /protected/ping
            Method: get

Outputs:
  ApiUrl:
    Description: Base URL for API Gateway
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod'
  BusTableName:
    Description: DynamoDB table name for buses
    Value: !Ref BusTable